acs$citizenF<-relevel(acs$citizenF,ref="Naturalized citizen")
acs$citizenF<-relevel(acs$citizenF,ref="US Born")
table(acs$citizenF)
source(file="doDivR.r")
barplot(t(numer),xlab="Age",ylab="Divorce Numbers",
col=(numercol<-1:length(levels(acs$citizenF))))
legend(x="topright",fill=rev(numercol),legend=rev(levels(acs$citizenF)),
cex=0.6,bty="n")
title(main="Divorce Numbers in 2011")
legend(x="topright",fill=rev(numercol),legend=rev(levels(acs$citizenF)),
cex=0.8,bty="n")
title(main="Divorce Numbers in 2011", cex = 1.2)
title(main="Divorce Numbers in 2011", cex = 1.5)
title(main="Divorce Numbers in 2011", cex = 2)
barplot(t(numer),xlab="Age",ylab="Divorce Numbers",
col=(numercol<-1:length(levels(acs$citizenF))))
legend(x="topright",fill=rev(numercol),legend=rev(levels(acs$citizenF)),
cex=0.8,bty="n")
title(main="Divorce Numbers in 2011", cex = 2)
title(main="Divorce Numbers in 2011", cex = 5)
title(main="Divorce Numbers in 2011")
cex=0.7,bty="n")
legend(x="topright",fill=rev(numercol),legend=rev(levels(acs$citizenF)),
cex=0.7,bty="n")
cex=0.8,bty="n")
legend(y="topright",fill=rev(numercol),legend=rev(levels(acs$citizenF)),
cex=0.8,bty="n")
legend(x="topright",fill=rev(numercol),legend=rev(levels(acs$citizenF)),
cex=0.8,bty="n")
source(file="doDivR.r")
barplot(t(numer),xlab="Age",ylab="Divorce Numbers",
col=(numercol<-1:length(levels(acs$citizenF))))
legend(x="topright",fill=rev(numercol),legend=rev(levels(acs$citizenF)),
cex=0.8,bty="n")
title(main="Divorce Numbers in 2011")
colorRampPalette(colors=c("black","red","green","blue"))
pal.citz<-colorRampPalette(colors=c("black","red","green","blue"))(4)
colnames(numer)
names(pal.citz)<-colnames(numer)
pal.citz
## dotchart
library(grid)
library(lattice)
library(survival)
library(splines)
library(Formula)
library(Hmisc)
dotchart(DivR)
names(pal.citz)<-colnames(DivR)
dotchart2(DivR[,"US Born"],col=pal.citz["US Born"],
ylim=range(DivR,na.rm=TRUE),
cex=0.9,ylab="Age",
xlab="Divorce Rates",
width.factor=2
)
for(cit in colnames(DivR)[2:ncol(DivR)]){
dotchart2(DivR[,cit],col=pal.citz[cit], add=TRUE)
}
legend(x="bottomright",fill=pal.citz,legend=names(pal.citz),
cex=0.6,bty='n')
title(main="Divorce Rate by Citizenship in 2011")
dev.off
names(pal.citz)<-colnames(DivR)
dotchart2(DivR[,"US Born"],col=pal.citz["US Born"],
ylim=range(DivR,na.rm=TRUE),
cex=0.9,ylab="Age",
xlab="Divorce Rates",
width.factor=2
)
for(cit in colnames(DivR)[2:ncol(DivR)]){
dotchart2(DivR[,cit],col=pal.citz[cit], add=TRUE)
}
legend(x="bottomright",fill=pal.citz,legend=names(pal.citz),
cex=0.6,bty='n')
title(main="Divorce Rate by Citizenship in 2011")
legend(x="bottomright",fill=pal.citz,legend=names(pal.citz),
cex=0.8,bty='n')
legend(x="bottomright",fill=pal.citz,legend=names(pal.citz),
cex=0.75,bty='n')
head(numer)
barplot(t(numer),xlab="Age",ylab="Divorce Numbers",
col=(numercol<-1:length(levels(acs$citizenF))))
legend(x=max(acs$ageN)-28,y=max(t(numer))+2000,fill=numercol,legend=levels(acs$citizenF),cex=0.6)
title(main="Divorce Numbers in 2011")
barplot(t(numer),xlab="Age",ylab="Divorce Numbers",
col=(numercol<-1:length(levels(acs$citizenF))))
legend(x="topright",fill=rev(numercol),legend=rev(levels(acs$citizenF)),
cex=0.8,bty="n")
title(main="Divorce Numbers in 2011")
source(file="doDivR.r")
barplot(t(numer),xlab="Age",ylab="Divorce Numbers",
col=(numercol<-1:length(levels(acs$citizenF))))
legend(x="topright",fill=rev(numercol),legend=rev(levels(acs$citizenF)),
cex=0.8,bty="n")
title(main="Divorce Numbers in 2011")
dotchart(DivR)
barplot(t(numer),xlab="Age",ylab="Divorce Numbers",
col=(numercol<-1:length(levels(acs$citizenF))), yaxt = "n")
barplot(t(numer),xlab="Age",ylab="Divorce Numbers",
col=(numercol<-1:length(levels(acs$citizenF))))
dotchart2(DivR[,"US Born"],col=pal.citz["US Born"],
ylim=range(DivR,na.rm=TRUE),
cex=0.9,ylab="Age",
xlab="Divorce Rates",
width.factor=2
)
dotchart2(DivR[,"US Born"],col=pal.citz["US Born"],
ylim=range(DivR,na.rm=TRUE),
cex=0.9,ylab="Age",
xlab="Divorce Rates",
width.factor=2
, yaxt = "n"
)
library(foreign)
acs<-read.dta(file="/Users/wei/Desktop/R-Note/visualization/ca_divorce.dta")
names(acs)
acs$yearR<-factor(as.character(acs$yearrr<-ifelse(acs$year=="2008","2008","2011")))
table(acs$yearR)
acs$ageN<-as.numeric(acs$age)
table(acs$ageN)
acs$citizenF<-factor(as.character(acs$citizen))
levels(acs$citizenF)
levels(acs$citizenF)[2]<-"US Born"
table(acs$citizenF)
acs$marrnoN<-factor(as.character(acs$marrno))
table(acs$marrnoN)
acs$divinyrL<-ifelse(acs$divinyr=="Yes",TRUE,FALSE)
table(acs$divinyrL)
acs$yrmarrR<-ifelse(acs$yrmarr=="0",NA,acs$yrmarr)
table(acs$yrmarrR)
acs$marryrS<-ifelse(acs$year=="2008",2008-acs$yrmarrR,2011-acs$yrmarrR)
table(acs$marryrS)
acs$is2011<-ifelse(acs$yearR==2011,1,NA)
table(acs$is2011)
code<-'## saving to file so we can source() repeatedly
numer<-with(acs,
tapply(perwt*divinyrL*is2011,
list(ageN,citizenF),sum,na.rm=TRUE)
)
denom<-with(acs,
tapply(perwt*marryrS*is2011,
list(ageN,citizenF),sum,na.rm=TRUE)
)
DivR<-numer/denom '
write(code,filev="doDivR.r")
source("doDivR.r",echo=TRUE)
apply(DivR,MARGIN=2,FUN=sum,na.rm=TRUE)
write(code,file="doDivR.r")
source("doDivR.r",echo=TRUE)
apply(DivR,MARGIN=2,FUN=sum,na.rm=TRUE)
install.packages("KernSmooth")
load(KernSmooth)
load("KernSmooth")
library(KernSmooth)
library(datasets)
data(iris)
?iris
names(iris)
summary(iris$Species)
virginica_data <- subset(iris, iris$Species == "virginica")
mean(virginica_data$Sepal.Length)
names(iris)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
names(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
range(mtcars$cyl)
levels(mtcars$cyl)
summary(mtcars$cyl)
table(mtcars$cyl)
avg_hp <- taaply(mtcars$hp, mtcars$cyl, mean)
avg_hp <- tapply(mtcars$hp, mtcars$cyl, mean)
avg_hp
str(avg_hp)
avg_hp[1]
abs(avg_hp[1] - avg_hp[3])
table(avg_hp)
summary(avg_hp)
avg_hp
names(avg_hp)
avg_hp["4"]
abs(avg_hp["4"] - avg_hp["8"])
debug(ls)
ls(mtcars)
a
b
exit
exit()
q()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a <- 1:10
cachemean(a)
makeVector(a)
cachemean(a)
makeVector(a)
a <- makeVector()     #initialize
a
class(a)       # shows that a is a list
class(a$set)   # shows that the elements of the list are functions
names(a)
a$set(c(1,2,3,4,5,6,7))     #set the vector
a$get()        #get the vector
cachemean(a)   #calculate the mean
cachemean(a)   #when is called back use the cached mean
cachemean(a)   #when is called back use the cached mean
a <- makeVector(1:7)
a<-makeVector(); a$set(1:7)
cachemean(a)
cachemean(a)   #when is called back use the cached mean
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
cachesolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
a <- makesolve()     #initialize
a <- makeCacheMatrix()     #initialize
a
class(a)       # shows that a is a list
names(a)
class(a$set)   # shows that the elements of the list are functions
matrix1 <- matrix(c(1,2,3,4,5,9), nrow = 2, ncol =3)
a$set(matrix1)     #set the matrix
a$get()        #get the matrix
cachemean(a)   #calculate the inverse
solve(matrix1)
matrix1 <- matrix(c(1,2,5,9), nrow = 2, ncol =2)
a$set(matrix1)     #set the matrix
a$get()        #get the matrix
cachemean(a)   #calculate the inverse
solve(matrix1)
a$get()        #get the matrix
names(a)
a$setsolve
a$getsolve
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a <- makeVector()     #initialize
a
class(a)       # shows that a is a list
names(a)
class(a$set)   # shows that the elements of the list are functions
vector1 <- c(1,2,3,4,5)
a$set(vector1)     #set the matrix
a$get()        #get the matrix
a$setsolve
a$setmean
a$getmean
cachemean(a)   #calculate the inverse
cachemean(a)   #when is called back use the cached mean
a <- makeCacheMatrix()     #initialize
a
class(a)       # shows that a is a list
names(a)
class(a$set)   # shows that the elements of the list are functions
matrix1 <- matrix(c(1,2,5,9), nrow = 2, ncol =2)
a$set(matrix1)     #set the matrix
a$get()        #get the matrix
a$setsolve
a$getsolve
cachemean(a)   #calculate the inverse
solve(matrix1)
a$get()        #get the matrix
cachemean(a)   #calculate the inverse
cachesolve(a)   #calculate the inverse
cachesolve(a)   #when is called back use the cached inverse
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
get <- function() x
setsolve <- function(solve) s <<- solve
getsolve <- function() s
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
s <- x$getsolve()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data, ...)
x$setsolve(s)
s
}
a <- makeCacheMatrix()     #initialize
a
class(a)       # shows that a is a list
names(a)
class(a$set)   # shows that the elements of the list are functions
matrix1 <- matrix(c(1,2,5,9), nrow = 2, ncol =2)
#solve(matrix1)
a$set(matrix1)     #set the matrix
a$get()        #get the matrix
a$setsolve
a$getsolve
cachesolve(a)   #calculate the inverse
cachesolve(a)   #when is called back use the cached inverse
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
get <- function() x
setsolve <- function(solve) s <<- solve
getsolve <- function() s
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
s <- x$getsolve()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data, ...)
x$setsolve(s)
s
}
a <- makeCacheMatrix()     #initialize
a
class(a)       # shows that a is a list
names(a)
class(a$set)   # shows that the elements of the list are functions
matrix1 <- matrix(c(1,2,5,9), nrow = 2, ncol =2)
#solve(matrix1)
a$set(matrix1)     #set the matrix
a$get()        #get the matrix
a$setsolve
a$getsolve
cacheSolve(a)   #calculate the inverse
cacheSolve(a)   #when is called back use the cached inverse
version()
R.version()
r.version
version
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
data(ToothGrowth)
runApp()
getwd()
setwd("Desktop/SUMMER//tool//shiny")
runApp("ToothGrowth")
library(shiny)
library(shinyapps)
runApp(ToothGrowth)
runApp("ToothGrowth", display.mode = "showcase")
runApp("ToothGrowth", display.mode = "showcase")
shinyapps::setAccountInfo(name='weisdata', token='9CE87B6C45EBBB66FC448EF0234C5A0F', secret='/mLuy/O5IwnRc9+eTU6Am24Dmcv15wmpayrpEMka')
deployApp()
library(shiny)
runApp()
getwd()
runApp("ToothGrowth")
shinyapps::setAccountInfo(name='weisdata', token='9CE87B6C45EBBB66FC448EF0234C5A0F', secret='/mLuy/O5IwnRc9+eTU6Am24Dmcv15wmpayrpEMka')
deployApp("ToothGrowth")
runApp("ToothGrowth")
ToothGrowth
ToothGrowth
write.csv("ToothGrowth")
write.csv("ToothGrowth", file="ToothGrowth.csv")
data <- read.csv("ToothGrowth/data/ToothGrowth.csv")
data
ToothGrowth
write.csv(ToothGrowth, file="ToothGrowth.csv")
data <- read.csv("ToothGrowth/data/ToothGrowth.csv")
data
ToothGrowth
write.csv(ToothGrowth, file="ToothGrowth/data/ToothGrowth.csv")
data <- read.csv("ToothGrowth/data/ToothGrowth.csv")
data
write.csv(ToothGrowth, file="ToothGrowth/data/ToothGrowth.csv", row.names=FALSE)
data <- read.csv("ToothGrowth/data/ToothGrowth.csv")
data
runApp("ToothGrowth")
shinyapps::setAccountInfo(name='weisdata', token='9CE87B6C45EBBB66FC448EF0234C5A0F', secret='/mLuy/O5IwnRc9+eTU6Am24Dmcv15wmpayrpEMka')
deployApp("ToothGrowth")
getwd()
---
runApp("ToothGrowth", display.mode = "showcase")
runApp("ToothGrowth", display.mode = "showcase")
runApp("ToothGrowth", display.mode = "showcase")
runApp("ToothGrowth", display.mode = "showcase")
runApp("ToothGrowth", display.mode = "showcase")
runApp("ToothGrowth", display.mode = "showcase")
runApp("ToothGrowth", display.mode = "showcase")
runApp("ToothGrowth", display.mode = "showcase")
runApp("ToothGrowth", display.mode = "showcase")
runApp("ToothGrowth", display.mode = "showcase")
shinyapps::setAccountInfo(name='weisdata', token='9CE87B6C45EBBB66FC448EF0234C5A0F', secret='/mLuy/O5IwnRc9+eTU6Am24Dmcv15wmpayrpEMka')
getwd()
depApp("ToothGrowth")
deployApp("ToothGrowth")
getwd()
setwd("slidfy-ToothGrowth/")
library(slidify)
author("mydeck")
data(ToothGrowth)
require(ggplot2)
data(ToothGrowth)
g <-  qplot(dose, len, data=ToothGrowth, geom=c("point", "smooth"), method="lm", formula = y~x, color= dose, main="Length by Dose", facets = . ~ supp, xlab="Dose Level", ylab="Length")
g
Orange Juice(OJ)
publish('WChen1127', 'slidify_toothgrowth')
publish('slidify_toothgrowth', 'WChen1127')
publish('WChen1127', 'slidify_toothgrowth')
publish('slidify_toothgrowth', 'WChen1127')
publish('slidify_toothgrowth', 'WChen1127')
publish('slidify_toothgrowth', 'WChen1127')
publish('slidify_toothgrowth', 'WChen1127')
getwd)
getwd()
setwd("/Users/wei/Desktop/SUMMER/tool/Github/slidify_toothgrowth/")
publish('slidify_toothgrowth', 'WChen1127')
shinyapps::setAccountInfo(name='weisdata', token='9CE87B6C45EBBB66FC448EF0234C5A0F', secret='/mLuy/O5IwnRc9+eTU6Am24Dmcv15wmpayrpEMka')
library(shinyapps)
getwd()
setwd("/Users/wei/Desktop/SUMMER/tool/Github")
shinyapps::setAccountInfo(name='weisdata', token='9CE87B6C45EBBB66FC448EF0234C5A0F', secret='/mLuy/O5IwnRc9+eTU6Am24Dmcv15wmpayrpEMka')
library(shinyapps)
setwd("shinyapps_toothgrowth/")
deployApp("ToothGrowth")
setwd("/Users/wei/Desktop/SUMMER/tool/Github/slidify_toothgrowth/")
publish('slidify_toothgrowth', 'WChen1127')
publish('slidify_toothgrowth', 'WChen1127')
publish('WChen1127', 'slidify_toothgrowth')
publish('slidify_toothgrowth', 'WChen1127')
library(slidify)
publish('slidify_toothgrowth', 'WChen1127')
publish(user = 'WChen1127', 'slidify_toothgrowth')
getwd()
setwd("/Users/wei/Desktop/SUMMER/tool/Github")
publish(user = 'WChen1127', repo='slidify_toothgrowth')
publish('slidify_toothgrowth', 'WChen1127')
setwd("/Users/wei/Desktop/SUMMER/tool/Github/slidify_toothgrowth")
publish('slidify_toothgrowth', 'WChen1127')
publish('slidify_toothgrowth', 'WChen1127')
